//선택된 노래에 음싸 링크 제공하기


function SearchPage(props) {
  const [selectedTracks, setSelectedTracks] = useState(
  JSON.parse(localStorage.getItem("selectedTracks")) || []
  ); // 로컬스토리지에서 저장된 데이터를 가져옵니다.
  
  const handleSaveTrack = (track) => {
  setSelectedTracks([...selectedTracks, track]); // 기존 데이터가 있는 경우 복사해서 다시 넣어줍니다.
  localStorage.setItem(
  "selectedTracks",
  JSON.stringify([...selectedTracks, track])
  ); // stringify 후 로컬스토리지에 저장합니다.
  };
  
  const openSpotifyLink = (url) => {
  window.open(url, "_blank");
  };
  
  const getMelonLink = async (artistName, songTitle) => {
  const searchResult = await axios.get(
  http://www.melon.com/search/keyword/index.json?query=${songTitle} ${artistName}
  );
  const trackId = searchResult.data.song.list[0].songId;
  return https://www.melon.com/song/detail.htm?songId=${trackId};
  };
  
  const getGenieLink = async (artistName, songTitle) => {
  const searchResult = await axios.get(
  https://www.genie.co.kr/search/searchSongTotal?sortBy=SONG&searchTerm=${songTitle} ${artistName}
  );
  const $ = cheerio.load(searchResult.data);
  const trackId = $("#ttl").attr("songid");
  return https://www.genie.co.kr/detail/songInfo?xgnm=${trackId};
  };
  
  const handleGetLinksClick = async (selectedTrack) => {
  const melonLink = await getMelonLink(
  selectedTrack.artists[0].name,
  selectedTrack.name
  );
  const genieLink = await getGenieLink(
  selectedTrack.artists[0].name,
  selectedTrack.name
  );
  alert(Spotify: ${selectedTrack.external_urls.spotify} Melon: ${melonLink} Genie: ${genieLink});
  };
  
  return (
  
  ...
  {props.searchTopTracks.map((topTrack, i) => {
  return (
  <div
  id={i}
  className="result-box in-bl"
  onClick={() => openSpotifyLink(topTrack.external_urls.spotify)}
  >
  
  
  
  
  
  {topTrack.name}
  
  {topTrack.artists[0].name}
  
  
  <button onClick={() => handleSaveTrack(topTrack)}>
  Save Track
  {" "}
  {/* 추후에 추가됩니다. */}
  <button onClick={() => handleGetLinksClick(topTrack)}>
  Get Links
  
  
  
  
  );
  })}
  
  );
  }
  위 코드는 선택한 곡의 정보를 이용하여 멜론, 지니 검색 페이지로 이동하는 링크를 제공합니다.
  
  사용한 패키지: axios, cheerio



























  //버전1. 선택한 노래 추가하기

  const [selectedSongs, setSelectedSongs] = useState([]);

  // const handleSongSelect = (song) => {
  //   setSelectedSongs([...selectedSongs, song]);
  // };

  // const [songs, setSongs] = useState([]);

  // const addSong = (track) => {
  //   // 선택한 노래의 정보를 'songs' 배열에 추가합니다.
  //   const newSong = {
  //     name: track.name,
  //     artist: track.artists[0].name,
  //     image: track.album.images[0].url
  //   };
  //   setSongs([...songs, newSong]);
  // };

        {/* 버전1. 선택한 노래 보여주기 */}
      <div>
        <h3>Selected Songs:</h3>
        <ul>
          {selectedSongs.map((song) => (
            <li key={song.id}>{song.name}</li>
          ))}
        </ul>
      </div>

      <h2>Saved Songs</h2>
      {/* 선택한 노래가 있다면 그 노래들을 보여줍니다. */}
      {selectedSongs.length > 0 && (
        <div className="search-result">
          {selectedSongs.map((song, i) => {
            return (
              <div key={i} className="result-box in-bl">
                <div className="result-box-card">
                  <div className="result-box-card-cover">
                    <img src={song.image} alt={`Album art for ${song.name}`} />
                  </div>
                  <div className="result-box-card-title">
                    <h6>{song.name}</h6>
                    <p>{song.artist}</p>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}
      {/* 선택한 노래가 없다면 메시지를 보여줍니다. */}
      {selectedSongs.length === 0 && <p>You haven't saved any songs yet.</p>}

      <div>
        {selectedSongs ? // 선택한 노래가 있다면 'SavedSongs' 페이지를 보여줍니다.
        null : (
          // 선택한 노래가 없다면 'SearchPage' 페이지를 보여줍니다.
          <SearchPage />
        )}
      </div>













      










  //버전2. 선택한 노래 추가하기
  const [selectedTracks, setSelectedTracks] = useState(JSON.parse(localStorage.getItem("selectedTracks")) || []); // 로컬스토리지에서 저장된 데이터를 가져옵니다.

  const handleSaveTrack = (track) => {
    setSelectedTracks([...selectedTracks, track]); // 기존 데이터가 있는 경우 복사해서 다시 넣어줍니다.
    localStorage.setItem("selectedTracks", JSON.stringify([...selectedTracks, track])); // stringify 후 로컬스토리지에 저장합니다.
  };



      {/* 버전2. 선택한 노래 보여주기 */}
      <div>
        <h1>Selected Tracks</h1>
        {selectedTracks.length > 0 ? (
          selectedTracks.map((track, i) => (
            <div key={i}>
              <img src={track.album.images[0].url} alt={track.name} />
              <p>{track.name}</p>
              <p>{track.artists[0].name}</p>
            </div>
          ))
        ) : (
          <p>No selected tracks yet.</p>
        )}
      </div>
















      import React from "react";

class MusicInfo extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      spotifyData: {}, // 스포티파이 API로부터 받아오는 데이터
      melonData: {}, // 멜론 사이트로부터 받아오는 데이터
      genieData: {}, // 지니사이트로 부터 받아오는 데이터
      loading: true // 로딩 상태
    };
  }

  componentDidMount() {
    const { title, artist } = this.props;
    // 스포티파이 API를 호출합니다.
    fetch(`https://api.spotify.com/v1/search?q=${title}+${artist}&type=track`)
      .then(res => res.json())
      .then(data => this.setState({ spotifyData: data }));

    // 멜론 API를 호출합니다.
    fetch(`https://www.melon.com/search/song/index.htm?q=${title} ${artist}`)
      .then(res => res.text())
      .then(html => {
        // html 파싱을 통해 멜론 데이터를 가져옵니다.
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");
        const linkElem = doc.querySelector(
          ".song_list > tbody > tr:nth-child(1) > td:nth-child(3) > div > a"
        );
        const thumbnailElem = doc.querySelector(
          ".image_typeAll > a > img"
        );
        if (linkElem) {
          this.setState({
            melonData: {
              link: linkElem.href,
              thumbnail: thumbnailElem.src
            }
          });
        }
      });

    // 지니 API를 호출합니다.
    fetch(
      `https://www.genie.co.kr/search/searchSong?query=${title}${artist}`
    )
      .then(res => res.text())
      .then(html => {
        // html 파싱을 통해 지니 데이터를 가져옵니다.
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");
        const linkElem = doc.querySelector("#body-content > div.search_song_section > div.search_result_detail > div.music-list-wrap > table > tbody > tr.list > td.info > a.title.ellipsis");
        const thumbnailElem = doc.querySelector(
          "#body-content > div.search_song_section > div.search_result_detail > div.music-list-wrap > table > tbody > tr.list > td:first-child > a > img",
        );
        if (linkElem) {
          this.setState({
            genieData: {
              link: linkElem.href,
              thumbnail: thumbnailElem.src
            }
          });
        }
      })
      .finally(() => this.setState({ loading: false }));
  }

  render() {
    const { title, artist } = this.props;
    const { spotifyData, melonData, genieData, loading } = this.state;

    return (
      <div>
        <h2>{title}</h2>
        <p>By {artist}</p>
        {loading && <p>Loading...</p>}
        {!loading && (
          <div>
            <h3>Listen in Spotify:</h3>
            {spotifyData.tracks && spotifyData.tracks.items.length > 0 ? (
              <iframe
                src={`https://open.spotify.com/embed/track/${spotifyData.tracks.items[0].id}`}
                width="300"
                height="380"
                frameborder="0"
                allowtransparency="true"
                allow="encrypted-media"
              ></iframe>
            ) : (
              <p>No results found on Spotify.</p>
            )}
            <h3>Listen in Melon:</h3>
            {melonData.link ? (
              <a href={melonData.link} target="_blank" rel="noreferrer">
                <img src={melonData.thumbnail} alt={`${title} - ${artist}`} />
              </a>
            ) : (
              <p>No results found on Melon.</p>
            )}
        <h3>Listen in Genie:</h3>
            {genieData.link ? (
              <a href={genieData.link} target="_blank" rel="noreferrer">
                <img src={genieData.thumbnail} alt={`${title} - ${artist}`} />
              </a>
            ) : (
              <p>No results found on Genie.</p>
            )}
          </div>
        )}
      </div>
    );
  }
}

export default MusicInfo;


  






















  <div className={`button-group ${isHover ? "hover" : ""}`}>
                        <button onClick={() => window.open(`https://www.melon.com/search/total/index.htm?q=${topTrack.name}`, "_blank")}>
                          Melon
                        </button>
                        <button onClick={() => window.open(`https://www.genie.co.kr/search/searchMain?query=${topTrack.name}`, "_blank")}>
                          Genie
                        </button>
                        <button onClick={() => window.open(`${topTrack.external_urls.spotify}`, "_blank")}>Spotify</button>
                      </div>